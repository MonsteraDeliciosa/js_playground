/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_moneyFormat__ = __webpack_require__(1);


var moneyFormat = new __WEBPACK_IMPORTED_MODULE_0__modules_moneyFormat__["a" /* default */]();

moneyFormat.init();

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_dictionary__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_ordinals__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__validation__ = __webpack_require__(4);




/* TODO
    0. get value from user (input, button)
        * validate data (digits + comma or dot only)
        * format user provided data: remove spaces
    1. separate PLN from GR into separate arrays
    2. GR limit to 2 digits after comma
    3. PLN to array
    4. reverse PLNarr
    5. combine into arrays of three
    6. reverse all arrs
    7. do the magic
    8. print output in container

*/

class MoneyFormat {

    constructor () {
        this.input = document.getElementById('cash');
        this.submit = document.getElementById('submit');
    }

    init () {

        this.submit.addEventListener('click', (event) => {
            event.preventDefault();

            let val = this.input.value;

            if (val.indexOf(',') < 0 || val.indexOf('.') < 0) {
                this.plnArrayHandle(val);
                // add 'zero groszy' to final string
                return;
            }

            this.formatCommas(val);
        });
    }

    formatCommas ( str ) {
        const fStr = str.replace('.', ',');

        this.separateDecimals (fStr);
    }

    separateDecimals ( str ) {
        const separated = str.split(',');

        this.limitDecimals(separated[1]);
        this.plnArrayHandle(separated[0]);

    }

    limitDecimals ( str ) {

        if (!str.length) {
            const limited = '00'
        } else if (str.length === 1) {
            const limited =+ '0'
        } else {
            const limited = str.slice(0, 2);
        }

        //call toStr function for limited

    }

    plnArrayHandle ( str ) {

        const reversed = str.split('').reverse();
        const grouped = createArr(reversed);
        const unreversed = grouped.reverse();

        function createArr(arr) {
            var separated = [];
            var i = 0;

            while (i < arr.length) {

                var firstArg = arr[i];
                var secArg = arr[i + 1] || '';
                var thirdArg = arr[i + 2] || '';
                var tempArr = [firstArg, secArg, thirdArg];

                separated.push(tempArr);
                i = i + 3;
            }

            return separated;
        }

        unreversed.forEach(element => {
            element.reverse();
        });

        //call toStr function for pln arrays

    }

    numToStr ( arr ) {

    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = MoneyFormat;


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const GR  = {
    sing: {
        nom: 'grosz'
    },
    plural: {
        nom: 'grosze',
        gen: 'groszy'
    }
}
/* unused harmony export GR */


const PLN = {
    sing: {
        nom: 'złoty'
    },
    plural: {
        nom: 'złote',
        gen: 'złotych'
    }
}
/* unused harmony export PLN */


const THOUSANDS = {
    sing: {
        nom: 'tysiąc'
    },
    plural: {
        nom: 'tysiące',
        gen: 'tysięcy'
    }
}
/* unused harmony export THOUSANDS */


const MILLIONS = {
    sing: {
        nom: 'milion'
    },
    plural: {
        nom: 'miliony',
        gen: 'milionów'
    }
}
/* unused harmony export MILLIONS */



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const INTEGERS = {
    0: 'zero',
    1: 'jeden',
    2: 'dwa',
    3: 'trzy',
    4: 'cztery',
    5: 'pięć',
    6: 'sześć',
    7: 'siedem',
    8: 'osiem',
    9: 'dziewięć'
}
/* unused harmony export INTEGERS */


const SEVERALS = {
    0: 'dziesięć',
    1: 'jedenaście',
    2: 'dwanaście',
    3: 'trzynaście',
    4: 'czternaście',
    5: 'piętnaście',
    6: 'szesnaście',
    7: 'siedemnaście',
    8: 'osiemnaście',
    9: 'dziewiętnaście'
}
/* unused harmony export SEVERALS */


const TENS = {
    0: null,
    1: {
        0: 'dziesięć',
        1: 'jedenaście',
        2: 'dwanaście',
        3: 'trzynaście',
        4: 'czternaście',
        5: 'piętnaście',
        6: 'szesnaście',
        7: 'siedemnaście',
        8: 'osiemnaście',
        9: 'dziewiętnaście'
    },
    2: 'dwadzieścia',
    3: 'trzydzieści',
    4: 'czterdzieści',
    5: 'pięćdziesiąt',
    6: 'sześćdziesiąt',
    7: 'siedemdziesiąt',
    8: 'osiemdziesiąt',
    9: 'dziewięćdziesiąt'
}
/* unused harmony export TENS */


const HUNDREDS = {
    0: null,
    1: 'sto',
    2: 'dwieście',
    3: 'trzysta',
    4: 'czterysta',
    5: 'pięćset',
    6: 'sześćset',
    7: 'siedemset',
    8: 'osiemset',
    9: 'dziewięćset'
}
/* unused harmony export HUNDREDS */


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* TODO
    * validate data:
        * digits + comma and dot only
        * remove spaces


*/

class Validation {

    constructor ( opts ) {
        this.input = document.getElementById('cash');
    }

    init () {
        this.validate(this.input);
    }

    valdate ( input ) {

        const pattern = new RegExp('^([1-9]){1}\d{0,}([\.,])?\d{0,2}$');
        
    }

}
/* unused harmony export default */


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,